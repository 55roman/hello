package ffroman.display {import flash.display.*;import flash.geom.*;import flash.events.*;import flash.display.Sprite;import flash.text.TextField;import flash.text.TextFieldAutoSize;import flash.text.TextFormat;import flash.utils.Timer;import caurina.transitions.Tweener;import caurina.transitions.properties.CurveModifiers;import caurina.transitions.properties.FilterShortcuts;	public dynamic class PopLabel extends Sprite{		private var font:String;		private var str:String;		private var size:uint;		private var cols:Array;		private var len:int;		private var kerning:Number;		private var tformat:TextFormat;		private var objs:Array;		private var objsP:Array;		private var objsR:Array;				private var reverse:Boolean;		private var timer:Timer;		private const basicR =20;		public function PopLabel($font:String,$size:uint=18,$len:int=100,$kerning:Number=0.5){			font = $font;			size = $size;			len = $len;			timer = new Timer(0,0)				mouseChildren = false;			mouseEnabled = false;			kerning = $kerning;			objs = new Array();			objsP = new Array();			objsR = new Array();			tformat = new TextFormat();			tformat.font = font;			tformat.size = size;			CurveModifiers.init();			FilterShortcuts.init();		}		public function setText($str:String,$cols:Array,$outline:Boolean=false,$outlineColor:uint=0xffffff,$outlineAlpha:Number=1,$reverse:Boolean=false):void{			//初期化			if(timer.running){timer.stop()};			str = $str;			cols = $cols;			reverse = $reverse;			var cn=0;						for(var i:uint=0;i<objs.length;i++ ){				if(objs[i]){					Tweener.removeTweens(objs[i])					removeChild(objs[i]);					objs[i] = null;				}			}			objs = new Array();			objsP = new Array();			objsR = new Array();						for(i=0;i<str.length;i++){				objs.push(createChar(str.substr(i,1),cols[cn]));				cn++;				if(cn>=cols.length){					cn=0;				}			}			var r = basicR*kerning;			var margin = r*(str.length-1)/2;			for(i=0;i<objs.length;i++){				var a = objs[i];				a.x = len*Math.cos((r*i-90-margin)*Math.PI/180);				if(!reverse){					a.y = len*Math.sin((r*i-90-margin)*Math.PI/180);				} else {					a.y = -len*Math.sin((r*i-90-margin)*Math.PI/180);				}				var ang = Math.atan2(a.x,a.y);				if(!reverse){					a.rotation = 180-ang*180/Math.PI;				} else {					a.rotation = -ang*180/Math.PI;				}				objsP.push(new Point(a.x,a.y));				objsR.push(a.rotation);			}			if($outline){				addFilters($outlineColor,$outlineAlpha);			}		}		var actionTime:Number;		var tran:String;		public function startLabelAction1($time:Number=1,$delay:Number=0,$transition:String="easeOutBack"):void{			actionTime = $time;			tran=$transition;			for(var i=0; i<objs.length;i++){				var a = addChild(objs[i]);				a.x *= 0.7;				a.y *=0.7;				a.rotation *= -10;				a.alpha = 0;			}			if($delay==0){				for(i=0;i<objs.length;i++){					Tweener.addTween(objs[i],{x:objsP[i].x,y:objsP[i].y,rotation:objsR[i],_bezier:[{x:0,y:-len*0.7}],alpha:1,time:actionTime,transition:tran});				}			} else {				timer = new Timer(1000*$delay,str.length);				timer.addEventListener(TimerEvent.TIMER,startAction1)				timer.start();			}		}		private function startAction1(e:TimerEvent){			Tweener.addTween(objs[timer.currentCount-1],{x:objsP[timer.currentCount-1].x,y:objsP[timer.currentCount-1].y,rotation:objsR[timer.currentCount-1],_bezier:[{x:0,y:-len*0.7}],alpha:1,time:actionTime,transition:tran});		}		public function endLabelAction1($time:Number=1,$delay:Number=0){			for(var i=0; i<objs.length;i++){				Tweener.removeTweens(objs[i])			}			timer.stop();			actionTime = $time;			if($delay==0){				for(i=0;i<objs.length;i++){					Tweener.addTween(objs[i],{x:objsP[i].x*0.7,y:objsP[i].y*0.7,rotation:objsR[i],alpha:0,time:actionTime,transition:"easeOutCubic"});				}			} else {				timer = new Timer(1000*$delay,str.length);				timer.addEventListener(TimerEvent.TIMER,endAction1)				timer.start();			}		}		private function endAction1(e:TimerEvent):void{			Tweener.addTween(objs[timer.currentCount-1],{x:objsP[timer.currentCount-1].x*0.7,y:objsP[timer.currentCount-1].y*0.7,rotation:objsR[timer.currentCount-1],alpha:0,time:actionTime,transition:"easeOutCubic"});					}//////////////////////////////////////////////////////		public function startLabelAction2($time:Number=1,$delay:Number=0,$transition:String="easeOutBack"):void{			actionTime = $time;			tran=$transition;			for(var i=0; i<objs.length;i++){				var a = addChild(objs[i]);				a.x *= 0.3;				a.y *=0.3;				a.scaleX = a.scaleY= 0.4;				a.rotation *= -10;				a.alpha = 0;				Tweener.addTween(a,{x:objsP[i].x,y:objsP[i].y,scaleX:1,scaleY:1,rotation:objsR[i],_bezier:[{x:0,y:-len*0.7}],alpha:1,time:actionTime,transition:tran});				Tweener.addTween(a,{y:y*1.4,alpha:0,time:1,transition:"easeInQuad",delay:actionTime});			}/*			timer = new Timer(1000*$delay,str.length);			timer.addEventListener(TimerEvent.TIMER,startAction2)			timer.start();*/		}		private function startAction2(e:TimerEvent){		}		private function createChar($c:String,$col:uint):Sprite {			var tf:TextField = new TextField();			tf.autoSize = TextFieldAutoSize.LEFT;			tf.embedFonts = true;			tf.defaultTextFormat = tformat;			tf.text = $c;			var tW = tf.width;			var tH = tf.height;			var spr = new Sprite();			var fillType:String = GradientType.LINEAR;			var colors:Array = [ $col,0x000000];			var alphas:Array = [0.2, 0];			var ratios:Array = [150, 160];			var matr:Matrix = new Matrix();			matr.createGradientBox(tW, tH,Math.PI/2, -tW*0.7, -tH*0.7);			matr.scale(1,1);			var spreadMethod:String = SpreadMethod.PAD;			var ca = new Shape();			var cb = new Shape();			ca.graphics.beginFill($col,1);			cb.graphics.beginGradientFill(fillType, colors, alphas, ratios,matr); 			ca.graphics.drawRect(tW/-2,tH/-2,tW,tH);			cb.graphics.drawRect(tW/-2,tH/-2,tW,tH);			cb.blendMode = BlendMode.LIGHTEN;			tf.x -= tW/2;			tf.y -= tH/2;			spr.addChild(ca);			spr.addChild(cb);			spr.addChild(tf);			spr.mask = tf;			return spr;		}				private function addFilters($col,$alpha){			Tweener.addTween(				this,				{					_Glow_alpha : $alpha,					_Glow_blurX : 2,					_Glow_blurY : 2,					_Glow_color : $col,					_Glow_quality : 2,					_Glow_strength : 16,					time        : 0				}			);		}	}}